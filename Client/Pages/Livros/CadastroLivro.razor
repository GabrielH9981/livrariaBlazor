@page  "/Book/CadastroBook"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="card m-3">
    <h4 class="card-header">Cadastro de Livros</h4>
    <div class="card-body">
        <EditForm Model="@book" OnValidSubmit="HandleValidSubmit" @onreset="HandleReset">
            <DataAnnotationsValidator />
                <div class="form-row">
                    <label>Nome do Livro:</label>
                    <InputText @bind-Value="book.Titulo" class="form-control" />
                    <ValidationMessage For="@(() => book.Titulo)" />
                </div>  

                <div class="form-row">
                    <label>Sinopse:</label>
                    <InputText @bind-Value="book.Sinopse" class="form-control" />
                    <ValidationMessage For="@(() => book.Sinopse)" />
                </div> 

                <div>
                <InputSelect @bind-Value="book.CategoryId">
                    <option value="">Select</option>
                    @foreach (var category in categoriesList)
                            {
                                <option value="@category.CategoryId">@category.Nome</option>
                            }
                        </InputSelect>
                </div>

                <!--
                <div>
                <InputSelect @bind-Value="book.BookAutors">
                    <option value="">Select</option>
                    @foreach (var autor in autorsList)
                            {
                                <option value="@autor.AutorId">@autor.Nome</option>
                            }
                        </InputSelect>
                </div>
                -->

                <div class="form-check form-check-inline">
                    @foreach (var autor in autorsList)
                    {
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" @bind-value="@autor.Checked" />
                            <label class="form-check-label">@autor.Nome</label>
                        </div>
                    }
                </div>

            <div class="text-center">
                <button type="submit" class="btn btn-primary mr-1">Salvar</button>
                <button type="reset" class="btn btn-secondary">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    
    private BookDto book = new BookDto();
    private List<Autor> autorList = new List<Autor>();
    private EditContext editContext { get; set; }
    private List<Category> categoriesList = new List<Category>();
    private List<Autor> autorsList = new List<Autor>();

    protected override async Task OnInitializedAsync()
    {
        // carregar as categorias
        var categories = await Http.GetFromJsonAsync<List<Category>>("/Category/List");
        foreach (var item in categories)
        {
            categoriesList.Add(item);
        }

        // carregar os autores
        var autors = await Http.GetFromJsonAsync<List<Autor>>("/Autor/List");
        foreach (var item in autors)
        {
            autorsList.Add(item);
        }
    }

    private async Task OnChangeCat(string value)
    {
        var autores = await Http.GetFromJsonAsync<List<Autor>>("/Autor/List");
        autorList.Clear();
        var autoresByBook = autores.Where(c => c.AutorId == Convert.ToInt32(value));
        foreach (var item in autoresByBook)
        {
            autorsList.Add(item);
        }
    }

    private async Task HandleValidSubmit()
    {
        var teste = await Http.PostAsJsonAsync("/Book/Create", book);
        NavigationManager.NavigateTo("Book/ListBook");
    }

    private void HandleReset()
    {
        book = new BookDto();
        editContext = new EditContext(book);
    }
}